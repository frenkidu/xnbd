<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.5//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@
  -->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>Arno</firstname>">
  <!ENTITY dhsurname   "<surname>Toell</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>$Date$</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>8</manvolnum>">
  <!ENTITY dhemail     "<email>debian@toell.net</email>">
  <!ENTITY dhusername  "Arno Toell">
  <!ENTITY dhucpackage "<refentrytitle>XNBD-SERVER</refentrytitle>">
  <!ENTITY dhpackage   "xnbd-server">

  <!ENTITY debian      "<productname>Debian GNU/Linux</productname>">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <author>
      &dhfirstname;
      &dhsurname;
    </author>
    <copyright>
      <year>2011</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>

    <refpurpose>serve a file as a block device to other computers
    running the &gnu;/Linux(tm) Operating
    System</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg>--lport <replaceable>port</replaceable></arg>
      <arg>--bgctlprefix  <replaceable>prefix</replaceable></arg>
      <arg>--logpath <replaceable>path</replaceable></arg>
      <arg>--daemonize</arg>
      <arg>--readonly</arg>
      <arg>--cow</arg>
      <arg>--version</arg>
      <arg>--target</arg>
      <arg>--proxy</arg>
      <arg>--help</arg>
      <arg choice=plain><replaceable>disk_image</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg>--proxy</arg>
      <arg><replaceable>options</replaceable></arg>
      <arg choice=plain><option><replaceable>target_host</replaceable> <replaceable>target_port</replaceable> <replaceable>cache_image</replaceable> <replaceable>bitmap_image</replaceable></option></arg>
    </cmdsynopsis>

    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg>--target</arg>
      <arg><replaceable>options</replaceable></arg>
      <arg choice=plain><option><replaceable>cache_image</replaceable></option></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg>--help</arg>
      <arg>--version</arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para><command>&dhpackage;</command> is the server for the Linux
    Network Block Device (NBD). With xNBD, a client can use a file,
    exported over the network from a server, as a block device. It can
    then be used for whatever purpose a normal block device (hard disk,
    CD-ROM, ...) can be used for.</para>

    <para>xNBD can be useful for diskless clients that need swap space,
    but you can also create a file system on it and use it as though it
    were a local file system.</para>

    <para>
    xNBD offers several advantages over the original NBD implementation. In
    addition to features offered by NBD, xNBD supports better performance,
    (distributed) Copy-on-Write, (basic) snapshot support and Live Storage 
    Migration along with IPv6 support.
    </para>
    <para>xNBD can operate in two modes, the target mode and the alternative
     proxy mode.
     In target mode, xNBD offers a listening TCP connection which allows a 
     <command>xnbd-client</command>(1) to access the exported <replaceable>cache_image</replaceable>.
     In proxy mode, xNBD connects another running xnbd-server instance and acts 
     as transparent proxy to the origin target server. This is very useful for 
     storage migration for Virtual Machine Monitors.</para>
  </refsect1>
  <refsect1>
    <title>OPTIONS</title>

    <para>The following options are supported:</para>

    <variablelist>
      

      <varlistentry>
	<term><option>--daemonize</option>
	</term>
	<listitem>
	  <para>Go into background as soon as the xnbd-server is started up</para>
	</listitem>
      </varlistentry>


      <varlistentry>
	<term><option>--bgctlprefix <replaceable>prefix</replaceable></option>
	</term>
	<listitem>
	  <para>The xNBD server can be controlled through a name pipe. When given, use 
          <replaceable>prefix</replaceable> as file name, default is <emphasis>/tmp/xnbd-bg.ctl</emphasis>).</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--lport <replaceable>port</replaceable></option>
	</term>
	<listitem>
	  <para>Accept incoming connections on the given <replaceable>port</replaceable>. A valid port is
	    any number between 1 and 65536. You may not use the same listeing port more than once per system.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--logpath <replaceable>file</replaceable></option>
        </term>
        <listitem>
          <para>Log informational messages to the given <replaceable>file</replaceable> if given. Defaults to <replaceable>/tmp/xnbd.log</replaceable></para>
        </listitem>
      </varlistentry>


      <varlistentry>
	<term><option>--readonly</option></term>
	<listitem>
	  <para>Export the <replaceable>disk_image</replaceable> read only. If a client tries to write
	    to a read-only exported file, it will receive an error, but
	    the connection will stay up.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>--cow</option></term>
	<listitem>
	  <para>Enable Copy-on-Write mode. When this option is provided,
	    write-operations are not committed to the exported <replaceable>disk_image</replaceable>, 
            but to a separate file. This separate file is removed when the
	    connection is closed, which means that serving this way will
	    make xnbd-server slow down (especially on large block devices
	    with lots of writes), and that after disconnecting and
	    reconnecting the client or the server, all changes are
	    lost.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--proxy</option></term>
        <listitem>
          <para>In the proxy server mode of xNBD, all I/O requests are intercepted, and redirected to a origin target server if needed. 
          All updated blocks are saved at the proxy server, and read blocks are also cached. No write does not happen at the target server.</para>
          <para>
          This feature is used for distributed Copy-on-Write NBD disks; one read-only disk image is shared among multiple clients, 
          and updated disk data is saved at each proxy</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--target</option></term>
        <listitem>
        <para>Start an xNBD server in target mode, that is it will export block level access to the given <replaceable>disk_image</replaceable> file.</para>
        <para><emphasis>WARNING:</emphasis> If you need concurrent access from multiple clients, you can access an exported image concurrently from 
        multiple clients. Yet xNBD does not do any locking or synchronization. In most cases you WILL need a cluster file system on the exported disk_image
        to avoid damage on your data.</para>
        </listitem>
      </varlistentry>


    </variablelist>
  </refsect1>

  <refsect1>
    <title>POSITIONAL ARGUMENTS</title>
    
    <para>The following positional options are supported:</para>

    <variablelist>
      <varlistentry>
	<term><option>disk_image</option></term>
	<listitem>
	  <para>The filename of the <replaceable>disk_image</replaceable> that should be exported. This
	  can be an arbitraryfile, including "real" blockdevices (i.e. a block device like <emphasis>/dev/sda1</emphasis>).</para>
	</listitem>
      </varlistentry>


      <varlistentry>
	<term><option>target_host</option></term>
	<listitem>
	  <para>When in proxy mode, use the given <replaceable>target_host</replaceable> as origin host. The resulting 
          xnbd-server instance will forward requests transparently to this remote side.</para>
	</listitem>
      </varlistentry>


      <varlistentry>
	<term><option>target_port</option></term>
	<listitem>
	  <para>The target origin port to connect in proxy mode</para>
	</listitem>
      </varlistentry>


      <varlistentry>
	<term><option>bitmap_image</option></term>
	<listitem>
	  <para>The bitmap file uses for synchronization when connecting to a target 
          origin host. A bitmap file records block numbers of updated and cached blocks.</para>
	</listitem>
      </varlistentry>
  </variablelist>
  </refsect1>
  <refsect1>
    <title>SIGNALS</title>
    <variablelist>
      <varlistentry>
        <term><option>SIGHUP</option></term>
        <listitem>
          <para>When in proxy mode, a SIGHUP instructs the <command>nbd-server</command> to detach from its origin. 
          From there and beyond, the nbd server instance will run as if it would have been started in target mode.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>SEE ALSO</title>

    <para>xnbd-client (1).</para>

  </refsect1>
  <refsect1>
    <title>AUTHOR</title>
    <para>The NBD kernel module and the NBD tools have been written by
    Pavel Macheck (pavel@ucw.cz) and is now maintained by Paul Clements.
    (Paul.Clements@steeleye.com).</para>

    <para>The xNBD userland (client and server) have been written by 
     Takahiro Hirofuchi (t.hirofuchi@aist.go.jp)</para>

    <para>This manual page was written by &dhusername; (&dhemail;) for
    the &debian; system (but may be used by others). Large parts are 
    verbatim copies of the original nbd-server and nbd-client manual 
    pages written by Wouter Verhelst (wouter@debian.org). Permission is
    granted to copy, distribute and/or modify this document under the
    terms of the <acronym>GNU</acronym> General Public License,
    version 2, as published by the Free Software Foundation.</para>

  </refsect1>
</refentry>

